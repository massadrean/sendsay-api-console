{"version":3,"sources":["api/sendsayApi.js","redux/actions/authorizationActions.js","redux/actions/actionTypes.js","redux/reducers/authorizationReducer.js","redux/reducers/consoleReducer.js","redux/reducers/rootReducer.js","redux/store.js","api/localStorage.js","routes/GuestRoute.js","routes/UserRoute.js","App.js","serviceWorker.js","index.js"],"names":["sendsay","Sendsay","sessionReceived","userData","type","SESSION_RECEIVED","requestSession","credentials","dispatch","a","login","sublogin","passwd","password","sendsayApi","request","action","response","session","setSession","checkSession","userLogout","USER_LOGOUT","MAKE_SENDSAY_REQUEST","RECEIVE_SENDSAY_RESPONSE","REMOVE_REQUEST_FROM_HISTORY","CLEAR_REQUEST_HISTORY","SET_CONSOLE_RATIO","SET_CONSOLE_INPUT_VALUE","initialState","isFetching","isServerError","ratio","inputValue","outputValue","undefined","requests","appReducer","combineReducers","state","console","requestObj","payload","body","successful","filter","item","unshift","pop","el","requestBody","value","preloadedState","stringifiedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","composeWithDevTools","applyMiddleware","thunk","subscribe","throttle","stringify","setItem","saveState","getState","connect","isAuthenticated","Component","component","rest","render","props","to","LoginPage","React","lazy","ConsolePage","checkSessionThunkAction","logoutAction","useState","loading","setLoading","useEffect","catch","finally","className","fallback","GuestRoute","path","exact","Boolean","window","location","hostname","match","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"iIAAA,YAEMA,EAAU,IAFhB,OAEoBC,GAELD,O,kLCDTE,EAAkB,SAAAC,GAAQ,MAAK,CACnCC,KAAMC,IACNF,aAGWG,EAAiB,SAAAC,GAAW,8CAAI,WAAMC,GAAN,uBAAAC,EAAA,6DACnCC,EAAsCH,EAAtCG,MAAOC,EAA+BJ,EAA/BI,SAAoBC,EAAWL,EAArBM,SADkB,SAEpBC,IAAWC,QAAQ,CACxCC,OAAQ,QACRN,QACAC,WACAC,WANyC,OAErCK,EAFqC,OAQrCd,EAAW,CAAEe,QAASD,EAASC,QAASR,MAAOO,EAASP,OAE1DC,IACFR,EAASQ,SAAWA,GAGtBG,IAAWK,WAAWF,EAASC,SAC/BV,EAASN,EAAgBC,IAfkB,2CAAJ,uDAkB5BiB,EAAe,SAAAF,GAAO,8CAAI,WAAMV,GAAN,SAAAC,EAAA,6DACrCK,IAAWK,WAAWD,GADe,SAE/BJ,IAAWC,QAAQ,CACvBC,OAAQ,SAH2B,OAKrCR,EAASN,EAAgB,KALY,2CAAJ,uDAQtBmB,EAAa,WAIxB,OAHAP,IAAWC,QAAQ,CACjBC,OAAQ,WAEH,CACLZ,KAAMkB,O,mECvCV,gRAAO,IAAMjB,EAAmB,mBACnBiB,EAAc,cACdC,EAAuB,uBACvBC,EAA2B,2BAC3BC,EAA8B,8BAC9BC,EAAwB,wBACxBC,EAAoB,oBACpBC,EAA0B,2B,4LCLjCC,EAAe,CACnBnB,MAAO,GACPC,SAAU,GACVO,QAAS,I,YCILW,EAAe,CACnBC,YAAY,EACZC,eAAe,EACfC,MAAO,CAAC,GAAI,IACZC,WAAY,GACZC,iBAAaC,EACbC,SAAU,ICTNC,EAAaC,0BAAgB,CACjCnC,SFCa,WAAsD,IAApCoC,EAAmC,uDAA3BV,EAAcb,EAAa,uDAAJ,GAC9D,OAAQA,EAAOZ,MACb,KAAKC,IACH,OAAO,2BAAKkC,GAAUvB,EAAOb,UAC/B,QACE,OAAOoC,IELXC,QDUa,WAAwC,IAAvCD,EAAsC,uDAA9BV,EAAcb,EAAgB,uDAAP,GAC7C,OAAQA,EAAOZ,MACb,KAAKmB,IACH,OAAO,2BACFgB,GADL,IAEET,YAAY,IAEhB,KAAKN,IACH,IAAMiB,EAAa,CACjBzB,OAAQA,EAAO0B,QAAQ1B,OACvB2B,KAAM3B,EAAO0B,QAAQC,KACrBC,WAAY5B,EAAO0B,QAAQE,YAEvBR,EAAW,YAAIG,EAAMH,UAAUS,QACnC,SAAAC,GAAI,OAAIA,EAAKH,OAAS3B,EAAO0B,QAAQC,QAKvC,OAHIP,EAASW,QAAQN,GAAc,IACjCL,EAASY,MAEJ,2BACFT,GADL,IAEET,YAAY,EACZC,eAAgBf,EAAO0B,QAAQE,WAC/BV,YAAalB,EAAO0B,QAAQzB,SAC5BmB,aAGJ,KAAKX,IACH,OAAO,2BACFc,GADL,IAEEH,SAAUG,EAAMH,SAASS,QAAO,SAAAI,GAAE,OAAIA,EAAGN,OAAS3B,EAAOkC,iBAE7D,KAAKxB,IACH,OAAO,2BACFa,GADL,IAEEH,SAAU,KAEd,KAAKT,IACH,OAAO,2BAAKY,GAAZ,IAAmBP,MAAOhB,EAAOgB,QACnC,KAAKJ,IACH,OAAO,2BAAKW,GAAZ,IAAmBN,WAAYjB,EAAOmC,QACxC,QACE,OAAOZ,MErDPa,ECPmB,WACvB,IACE,IAAMC,EAAmBC,aAAaC,QAAQ,SAC9C,IAAKF,EACH,OAEF,OAAOG,KAAKC,MAAMJ,GAClB,MAAOK,GACP,QDDmBC,GAEjBC,EAAQC,uBDEC,SAACtB,EAAOvB,GAIrB,OAHIA,EAAOZ,OAASkB,MAClBiB,OAAQJ,GAEHE,EAAWE,EAAOvB,KCJzBoC,EACAU,8BAAoBC,0BAAgBC,OAGtCJ,EAAMK,UACJC,KAAS,YCJc,SAAA3B,GACvB,IACE,IAAMc,EAAmBG,KAAKW,UAAU5B,GACxCe,aAAac,QAAQ,QAASf,GAC9B,MAAOK,KDCPW,CAAU,CACRlE,SAAUyD,EAAMU,WAAWnE,SAC3BqC,QAAS,CACPR,MAAO4B,EAAMU,WAAW9B,QAAQR,MAChCI,SAAUwB,EAAMU,WAAW9B,QAAQJ,eAIzC,KAGawB,Q,6CEDAW,mBANf,SAAyBhC,GACvB,MAAO,CACLiC,kBAAmBjC,EAAMpC,SAASe,WAIvBqD,EAjBG,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAA4BC,EAA/B,EAAoBC,UAAyBC,EAA7C,sDAChB,kBAAC,IAAD,iBACOA,EADP,CAEEC,OAAS,SAAAC,GAAK,OACXL,EAA+C,kBAAC,IAAD,CAAUM,GAAG,aAA1C,kBAACL,EAAeI,UCa1BN,mBANf,SAAyBhC,GACvB,MAAO,CACLiC,kBAAmBjC,EAAMpC,SAASe,WAIvBqD,EAjBG,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAA4BC,EAA/B,EAAoBC,UAAyBC,EAA7C,sDAChB,kBAAC,IAAD,iBACOA,EADP,CAEEC,OAAS,SAAAC,GAAK,OACZL,EAAkB,kBAACC,EAAeI,GAAa,kBAAC,IAAD,CAAUC,GAAG,kBCL5DC,G,MAAYC,IAAMC,MAAK,kBAC3B,wDAEIC,EAAcF,IAAMC,MAAK,kBAC7B,8DA4CF,IAaeV,eAbS,SAAAhC,GAAK,MAAK,CAChCrB,QAASqB,EAAMpC,SAASe,YAGC,SAAAV,GAAQ,MAAK,CACtC2E,wBAAyB,SAAAjE,GAAO,OAAIV,EAASY,YAAaF,KAC1DkE,aAAc,WACZ5E,EAASa,mBAMEkD,EAhDf,YAAkE,IAAnDrD,EAAkD,EAAlDA,QAASiE,EAAyC,EAAzCA,wBAAyBC,EAAgB,EAAhBA,aAAgB,EACjCC,oBAAS,GADwB,mBACxDC,EADwD,KAC/CC,EAD+C,KAgB/D,OAbAC,qBAAU,WACJtE,IACFqE,GAAW,GACXJ,EAAwBjE,GACrBuE,OAAM,WACLL,OAEDM,SAAQ,WACPH,GAAW,SAGhB,CAACJ,EAAyBjE,EAASkE,IAGpC,yBAAKO,UAAU,OACXL,EACA,yBAAKK,UAAU,cAEf,kBAAC,WAAD,CAAUC,SAAW,yBAAKD,UAAU,eAClC,kBAAC,IAAD,KACE,kBAACE,EAAD,CAAYC,KAAK,SAASC,OAAK,EAACrB,UAAYK,IAC5C,kBAAC,EAAD,CAAWe,KAAK,WAAWC,OAAK,EAACrB,UAAYQ,IAC7C,kBAAC,IAAD,CAAOY,KAAK,KACR5E,EAAU,kBAAC,IAAD,CAAU4D,GAAG,aAAgB,kBAAC,IAAD,CAAUA,GAAG,kBCpChDkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASzB,OACP,kBAAC,IAAD,CAAY0B,SAAS,wBACnB,kBAAC,IAAD,CAAU1C,MAAQA,GAChB,kBAAC,EAAD,QAGJ2C,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLvE,QAAQuE,MAAMA,EAAMC,c","file":"static/js/main.7ca4ff33.chunk.js","sourcesContent":["import Sendsay from \"sendsay-api\";\r\n\r\nconst sendsay = new Sendsay();\r\n\r\nexport default sendsay;\r\n","import { SESSION_RECEIVED, USER_LOGOUT } from \"./actionTypes\";\r\nimport sendsayApi from \"../../api/sendsayApi\";\r\n\r\nconst sessionReceived = userData => ({\r\n  type: SESSION_RECEIVED,\r\n  userData\r\n});\r\n\r\nexport const requestSession = credentials => async dispatch => {\r\n  const { login, sublogin, password: passwd } = credentials;\r\n  const response = await sendsayApi.request({\r\n    action: \"login\",\r\n    login,\r\n    sublogin,\r\n    passwd\r\n  });\r\n  const userData = { session: response.session, login: response.login };\r\n\r\n  if (sublogin) {\r\n    userData.sublogin = sublogin;\r\n  }\r\n\r\n  sendsayApi.setSession(response.session);\r\n  dispatch(sessionReceived(userData));\r\n};\r\n\r\nexport const checkSession = session => async dispatch => {\r\n  sendsayApi.setSession(session);\r\n  await sendsayApi.request({\r\n    action: \"pong\"\r\n  });\r\n  dispatch(sessionReceived({}));\r\n};\r\n\r\nexport const userLogout = () => {\r\n  sendsayApi.request({\r\n    action: \"logout\"\r\n  });\r\n  return {\r\n    type: USER_LOGOUT\r\n  };\r\n};\r\n","export const SESSION_RECEIVED = \"SESSION_RECEIVED\";\r\nexport const USER_LOGOUT = \"USER_LOGOUT\";\r\nexport const MAKE_SENDSAY_REQUEST = \"MAKE_SENDSAY_REQUEST\";\r\nexport const RECEIVE_SENDSAY_RESPONSE = \"RECEIVE_SENDSAY_RESPONSE\";\r\nexport const REMOVE_REQUEST_FROM_HISTORY = \"REMOVE_REQUEST_FROM_HISTORY\";\r\nexport const CLEAR_REQUEST_HISTORY = \"CLEAR_REQUEST_HISTORY\";\r\nexport const SET_CONSOLE_RATIO = \"SET_CONSOLE_RATIO\";\r\nexport const SET_CONSOLE_INPUT_VALUE = \"SET_CONSOLE_INPUT_VALUE\";\r\n","import { SESSION_RECEIVED } from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  login: \"\",\r\n  sublogin: \"\",\r\n  session: \"\"\r\n};\r\n\r\nexport default function userData(state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case SESSION_RECEIVED:\r\n      return { ...state, ...action.userData };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  MAKE_SENDSAY_REQUEST,\r\n  RECEIVE_SENDSAY_RESPONSE,\r\n  REMOVE_REQUEST_FROM_HISTORY,\r\n  CLEAR_REQUEST_HISTORY,\r\n  SET_CONSOLE_RATIO,\r\n  SET_CONSOLE_INPUT_VALUE\r\n} from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  isFetching: false,\r\n  isServerError: false,\r\n  ratio: [50, 50],\r\n  inputValue: \"\",\r\n  outputValue: undefined,\r\n  requests: []\r\n};\r\n\r\nexport default (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case MAKE_SENDSAY_REQUEST:\r\n      return {\r\n        ...state,\r\n        isFetching: true\r\n      };\r\n    case RECEIVE_SENDSAY_RESPONSE: {\r\n      const requestObj = {\r\n        action: action.payload.action,\r\n        body: action.payload.body,\r\n        successful: action.payload.successful\r\n      };\r\n      const requests = [...state.requests].filter(\r\n        item => item.body !== action.payload.body\r\n      );\r\n      if (requests.unshift(requestObj) > 15) {\r\n        requests.pop();\r\n      }\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        isServerError: !action.payload.successful,\r\n        outputValue: action.payload.response,\r\n        requests\r\n      };\r\n    }\r\n    case REMOVE_REQUEST_FROM_HISTORY:\r\n      return {\r\n        ...state,\r\n        requests: state.requests.filter(el => el.body !== action.requestBody)\r\n      };\r\n    case CLEAR_REQUEST_HISTORY:\r\n      return {\r\n        ...state,\r\n        requests: []\r\n      };\r\n    case SET_CONSOLE_RATIO:\r\n      return { ...state, ratio: action.ratio };\r\n    case SET_CONSOLE_INPUT_VALUE:\r\n      return { ...state, inputValue: action.value };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { USER_LOGOUT } from \"../actions/actionTypes\";\r\n\r\nimport userData from \"./authorizationReducer\";\r\nimport console from \"./consoleReducer\";\r\n\r\nconst appReducer = combineReducers({\r\n  userData,\r\n  console\r\n});\r\n\r\nexport default (state, action) => {\r\n  if (action.type === USER_LOGOUT) {\r\n    state = undefined;\r\n  }\r\n  return appReducer(state, action);\r\n};\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport throttle from \"lodash/throttle\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\nimport { loadState, saveState } from \"../api/localStorage\";\r\n\r\nconst preloadedState = loadState();\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  preloadedState,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nstore.subscribe(\r\n  throttle(() => {\r\n    saveState({\r\n      userData: store.getState().userData,\r\n      console: {\r\n        ratio: store.getState().console.ratio,\r\n        requests: store.getState().console.requests\r\n      }\r\n    });\r\n  }),\r\n  1000\r\n);\r\n\r\nexport default store;\r\n","export const loadState = () => {\r\n  try {\r\n    const stringifiedState = localStorage.getItem(\"state\");\r\n    if (!stringifiedState) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(stringifiedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = state => {\r\n  try {\r\n    const stringifiedState = JSON.stringify(state);\r\n    localStorage.setItem(\"state\", stringifiedState);\r\n  } catch (err) {\r\n    // ignore\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nconst propTypes = {\r\n  component: PropTypes.oneOfType([PropTypes.object]).isRequired,\r\n  isAuthenticated: PropTypes.bool.isRequired\r\n};\r\n\r\nconst UserRoute = ({ isAuthenticated, component: Component, ...rest }) => (\r\n  <Route\r\n    { ...rest }\r\n    render={ props =>\r\n      !isAuthenticated ? <Component { ...props } /> : <Redirect to=\"/console\" />\r\n    }\r\n  />\r\n);\r\n\r\nUserRoute.propTypes = propTypes;\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isAuthenticated: !!state.userData.session\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(UserRoute);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nconst propTypes = {\r\n  component: PropTypes.oneOfType([PropTypes.object]).isRequired,\r\n  isAuthenticated: PropTypes.bool.isRequired\r\n};\r\n\r\nconst UserRoute = ({ isAuthenticated, component: Component, ...rest }) => (\r\n  <Route\r\n    { ...rest }\r\n    render={ props =>\r\n      isAuthenticated ? <Component { ...props } /> : <Redirect to=\"/login\" />\r\n    }\r\n  />\r\n);\r\n\r\nUserRoute.propTypes = propTypes;\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isAuthenticated: !!state.userData.session\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(UserRoute);\r\n","import React, { Suspense, useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { checkSession, userLogout } from \"./redux/actions/authorizationActions\";\r\nimport GuestRoute from \"./routes/GuestRoute\";\r\nimport UserRoute from \"./routes/UserRoute\";\r\nimport \"./App.css\";\r\n\r\nconst LoginPage = React.lazy(() =>\r\n  import(/* webpackChunkName: \"LoginPage\" */ \"./components/pages/LoginPage\")\r\n);\r\nconst ConsolePage = React.lazy(() =>\r\n  import(/* webpackChunkName: \"ConsolePage\" */ \"./components/pages/ConsolePage\")\r\n);\r\n\r\nconst propTypes = {\r\n  session: PropTypes.string,\r\n  checkSessionThunkAction: PropTypes.func.isRequired,\r\n  logoutAction: PropTypes.func.isRequired\r\n};\r\n\r\nfunction App({ session, checkSessionThunkAction, logoutAction }) {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (session) {\r\n      setLoading(true);\r\n      checkSessionThunkAction(session)\r\n        .catch(() => {\r\n          logoutAction(); // clear storage if the session has expired\r\n        })\r\n        .finally(() => {\r\n          setLoading(false);\r\n        });\r\n    }\r\n  }, [checkSessionThunkAction, session, logoutAction]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      { loading ? (\r\n        <div className=\"preloader\" />\r\n      ) : (\r\n        <Suspense fallback={ <div className=\"preloader\" /> }>\r\n          <Switch>\r\n            <GuestRoute path=\"/login\" exact component={ LoginPage } />\r\n            <UserRoute path=\"/console\" exact component={ ConsolePage } />\r\n            <Route path=\"*\">\r\n              { session ? <Redirect to=\"/console\" /> : <Redirect to=\"/login\" /> }\r\n            </Route>\r\n          </Switch>\r\n        </Suspense>\r\n      ) }\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  session: state.userData.session\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  checkSessionThunkAction: session => dispatch(checkSession(session)),\r\n  logoutAction: () => {\r\n    dispatch(userLogout());\r\n  }\r\n});\r\n\r\nApp.propTypes = propTypes;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n// import { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\nimport \"reset-css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <HashRouter basename=\"/sendsay-api-console\">\r\n    <Provider store={ store }>\r\n      <App />\r\n    </Provider>\r\n  </HashRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}